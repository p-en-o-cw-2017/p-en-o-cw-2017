package p_en_o_cw_2017;

/*

The drone consists of an engine and four airfoils (the two wings and the
horizontal and vertical stabilizers). In the drone coordinate system,
- the drone's center of gravity is at (0, 0, 0)
- the left wing is at (-wingX, 0, 0). (That is, its mass is modeled as a point
  mass at that location, and its lift force is modeled as a point force at that
  location.
- the right wing is at (wingX, 0, 0)
- the horizontal and vertical stabilizers are at (0, 0, tailSize)
- the engine is somewhere on the negative Z axis. (Its location is determined
  by the fact that the center of gravity is at (0, 0, 0).) Its mass, too, is
  modeled as a point mass and its thrust force as a point force at the same
  location.
The drone coordinate system is right-handed; (0, 1, 0) points towards the top
of the drone.

The drone's geometry is not completely fixed: each airfoil can be rotated
around an axis. We define each airfoil's axis vector as follows:
- The axis vector of both wings and of the horizontal stabilizer is (1, 0, 0).
- The axis vector of the vertical stabilizer is (0, 1, 0).

We define each airfoil's attack vector as follows:
- The left wing's attack vector is (0, sin(leftWingInclination), -cos(leftWingInclination)).
- The right wing's attack vector is (0, sin(rightWingInclination), -cos(rightWingInclination)).
- The horizontal stabilizer's attack vector is (0, sin(horStabInclination), -cos(horStabInclination)).
- The vertical stabilizer's attack vector is (-sin(verStabInclination), 0, -cos(verStabInclination)).

We define an airfoil's normal as the cross product of its axis vector and its
attack vector.

We define an airfoil's projected airspeed vector as its airspeed vector (its
velocity minus the wind velocity) projected onto the plane perpendicular to its
axis vector. We define its projected airspeed as the size of its projected
airspeed vector. We define its angle of attack as -atan2(S . N, S . A), where S
is the projected airspeed vector, N is the normal, and A is the attack vector.

The forces operating on the drone, in drone coordinates, are the following:
- Gravity applies to each of the four point masses
- The engine thrust force vector is (0, 0, -thrust)
- Each airfoil generates a lift force N . liftSlope . AOA . s^2, where N is the
  normal, AOA is the angle of attack, and s is the projected airspeed.  No
  other forces operate on the drone; in particular, there is no drag.

The drone has a camera located at (0, 0, 0) and looking towards (0, 0, -1).
(The drone (including the engine) is transparent to this camera; it does not block any part of its view.)

The direction of gravity is (0, -1, 0) in world coordinates. The world coordinate
system is right-handed.

All physical quantities are expressed in SI units; all angles are expressed in
radians.

*/

public datatype AutopilotConfig {
    /** unique identifier for the drone */
    String droneID;
    /** The world's gravitational constant (in N/kg). */
    float gravity;
    /** Distance between the drone's center of gravity and the point where the wings' mass and lift are located. */
    float wingX;
    /** Distance between the drone's center of gravity and the point where the tail mass and the lift generated by the horizontal and vertical stabilizers is located. */
    float tailSize;
    /** Y coordinate of the wheels */
    float wheelY;
    /** Z coordinate of the front wheel */
    float frontWheelZ;
    /** Z coordinate of the rear wheels */
    float rearWheelZ;
    /** absolute value of X coordinate of the rear wheels */
    float rearWheelX;
    /** tyreSlope constant */
    float tyreSlope;
    /** dampSlope constant */
    float dampSlope;
    /** radius of wheels/tyres */
    float tyreRadius;
    /** maximal breaking power on each wheel*/
    float rMax;
    /** maximal friction coefficient for rear wheels */
    float fcMax;
    /** Mass of the engine. The engine is located in front of the drone's center of gravity. */
    float engineMass;
    /** Mass of the left wing. Equals the mass of the right wing. Modeled as being located in a single point. */
    float wingMass;
    /** Mass of the tail. Modeled as being located in a single point. */
    float tailMass;
    /** Maximum forward engine thrust. (Minimum thrust is zero.) */
    float maxThrust;
    /** Maximum magnitude of the angle of attack of all four airfoils. If during a simulation an airfoil's angle of attack exceeds this value, the simulator may report an error and abort the simulation. */
    float maxAOA;
    /** The liftSlope value for computing the lift generated by a wing. */
    float wingLiftSlope;
    /** The liftSlope value for the horizontal stabilizer. */
    float horStabLiftSlope;
    /** The liftSlope value for the vertical stabilizer. */
    float verStabLiftSlope;
    /** The horizontal angle of view of the camera. */
    float horizontalAngleOfView;
    /** The vertical angle of view of the camera. */
    float verticalAngleOfView;
    /** The number of columns of pixels in the camera image. */
    int nbColumns;
    /** The number of rows of pixels in the camera image. */
    int nbRows;
}

public datatype AutopilotInputs_v2 {
    /** The camera image, top row first. Within a row, leftmost pixel first.
    Three bytes (R, G, B) per pixel.
    Note: Java's 'byte' type is signed and its values are the integers between -128 and 127.
    Color values v between 128 and 255 are encoded as v - 256.
    So, to set the R value (given as an integer between 0 and 255) of the pixel at row r and column c:
    
        image[(r * nbColumns + c) * 3] = (byte)R;
    
    To get the B value (as an integer between 0 and 255) of the pixel at row r and column c:

        int B = image[(r * nbColumns + c) * 3 + 2] & 0xff;
    
    */
    byte[] image;
    /** X coordinate of the drone's center of gravity in world coordinates. */
    float x;
    /** Y coordinate of the drone's center of gravity in world coordinates. */
    float y;
    /** Z coordinate of the drone's center of gravity in world coordinates. */
    float z;
    /** atan2(H . (-1, 0, 0), H . (0, 0, -1)), where H is the drone's heading vector (which we define as H0/||H0|| where H0 is the drone's forward vector ((0, 0, -1) in drone coordinates) projected onto the world XZ plane. */
    float heading;
    /** atan2(F . (0, 1, 0), F . H), where F is the drone's forward vector and H is the drone's heading vector. */
    float pitch;
    /** atan2(R . U0, R . R0), where R is the drone's right direction ((1, 0, 0) in drone coordinates), R0 = H x (0, 1, 0), and U0 = R0 x F. */
    float roll;
    /** The amount of simulated time elapsed since the start of the simulation. Need not bear any relationship to real time (other than increasing). */
    float elapsedTime;
}

public datatype AutopilotOutputs {
    float thrust;
    float leftWingInclination;
    float rightWingInclination;
    float horStabInclination;
    float verStabInclination;
    float frontBrakeForce;
    float leftBrakeForce;
    float rightBrakeForce;
}

/** For Part 2, a flight job is simply a list of locations, that is, a Path.
    The color of the cube near each location is not given; the drone can assume that there is always only one cube within the error range of each location. */

public datatype Path {
	  /** list of X coordinates */
	  float[] x;
	  /** list of Y coordinates */
	  float[] y;
	  /** list of Z coordinates */
	  float[] z;
}
